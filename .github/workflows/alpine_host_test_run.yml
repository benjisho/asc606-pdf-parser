name: Alpine Host Test Run

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'  # Ensure README changes don't trigger a rebuild
      - 'LICENSE'  # License changes are unlikely to affect the build
      - '.gitignore'  # Gitignore changes shouldn't affect the script
      - '.github/workflows/*'  # Changes to workflows should not trigger a build
      - 'pdf_files_to_parse/**'  # Input files are dynamic and shouldn't trigger image rebuilds
      - 'output_files/**'  # Output files shouldn't trigger image rebuilds
      
jobs:
  alpine_host_test:
    runs-on: ubuntu-latest  # Run on Ubuntu, which will then use an Alpine container for testing
    container:
      image: alpine:3.20  # Use Alpine Linux container

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install Dependencies on Alpine
      run: |
        apk update
        apk add --no-cache python3 py3-pip wget expect

    - name: Install Python Requirements
      run: rm /usr/lib/python*/EXTERNALLY-MANAGED && pip3 install -r asc606-pdf-parser-app/requirements.txt
          
    - name: Download Sample PDF
      run: |
        wget -q -O pdf_files_to_parse/sample.pdf https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf || {
          echo "Failed to download sample PDF";
          exit 1;
        }



    - name: Run Python Script with Expect
      run: |
        expect -c "
          set timeout 600
          spawn python3 asc606-pdf-parser-app/asc606-pdf-parser.py
          expect {
            \"No PDF files found in directory: pdf_files_to_parse\" {
              puts \"Error: No PDF files found\"
              exit 1
            }
            \"Finished extracting text from PDF\" {
              exp_continue
            }
            \"Summary written to: output_files/*\" {
              puts \"Parsing successful\"
              exit 0
            }
            default {
              puts \"Error: Parsing failed\"
              exit 1
            }
          }
        "

    - name: Verify Output File
      run: |
        if [ ! -f output_files/sample.txt ]; then
          echo "Error: Output file not found"
          exit 1
        fi

    timeout-minutes: 10